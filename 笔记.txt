EurekaClient.java 源码
 1 DiscoveryClient() 构造方法 六个参数
 1.1 fetchRegistry(false); //从远程获取注册表信息
     1.1.1 getAndStoreFullRegistry(); //全量获取注册表
            eurekaTransport.queryClient.getApplications(remoteRegionsRef.get()) //AbstractJerseyEurekaHttpClient.getApplications() 客户端提交全量获取注册表的请求
            AbstractJerseyEurekaHttpClient.java getApplicationsInternal(String urlPath, String[] regions)两个参数
     1.1.2 getAndUpdateDelta(applications); //增量获取注册表

 1.2 if (!register() ) { //注册，实际不会在这里第一次注册，条件不满足
     1.2.1 httpResponse = eurekaTransport.registrationClient.register(instanceInfo); //AbstractJerseyEurekaHttpClient.register()注册 

 1.3 initScheduledTasks(); //定时任务
     1.3.1 定时更新客户端注册表
            TimedSupervisorTask.run() 能够实现下一次的调用，多次执行
            CacheRefreshThread.run().refreshRegistry() 以指定的时间间隔获取注册表信息的任务。（获取注册表）
                boolean success = fetchRegistry(remoteRegionsModified); //获取注册表信息
                    getAndUpdateDelta(applications); //增量获取注册表
                        eurekaTransport.queryClient.getDelta(remoteRegionsRef.get()); //获取增量信息的请求
                            AbstractJerseyEurekaHttpClient.java getApplicationsInternal(String urlPath, String[] regions)两个参数
                        updateDelta(delta); //这里要将从server获取到的所有变更信息更新到本地缓存。
                            applications.addApplication(app); //新增、修改
                            existingApp.removeInstance(instance); //删除

     1.3.2 定时续约
            TimedSupervisorTask.run() 能够实现下一次的调用，多次执行
            HeartbeatThread.run().renew() 定时续约 
                eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, null);续约
                    AbstractJerseyEurekaHttpClient.java sendHeartBeat()
                        requestBuilder.put(ClientResponse.class); //提交put请求，进行续约
                register(); //[第一次注册；] 如果返回续约状态状态码为404,则进行注册

     1.3.3 定时更新client信息给server（client端配置文件信息发生变化）
            instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds()); //启动[定时任务]更新client信息给server 
            InstanceInfoReplicator.java  scheduler.schedule(this, initialDelayMs, TimeUnit.SECONDS); //启动任务，一次性的；更新client信息给server；执行run()
                run() // 更新client信息给server 
                    discoveryClient.refreshInstanceInfo(); //更新instanceInfo信息
                        applicationInfoManager.refreshLeaseInfoIfRequired(); //更新续约信息
                    discoveryClient.register(); //提交【注册请求】给server

            InstanceInfoReplicator.java  instanceInfoReplicator.onDemandUpdate(); //配置文件发生变更时，[按需更新]client信息给server
                run() // 更新client信息给server 
            
 2 client服务下架
 2.1 shutdown() 下架
    2.1.1 去掉监听器、取消定时任务、如果如果Manager不为null，取消注册
        unregister(); //取消注册
            eurekaTransport.registrationClient.cancel(instanceInfo.getAppName(), instanceInfo.getId()); 提交下架请求
                AbstractJerseyEurekaHttpClient.java cancel()
                    resourceBuilder.delete(ClientResponse.class); //delete请求

 3 client服务下线；下线请求，提交的状态为CANCEL_OVERRIDE，不提供注册发现了，本身还在启动着
 3.1 spring-cloud-commons/src/main/java/org/springframework/cloud/client/serviceregistry/ServiceRegistryAutoConfiguration.java
 3.2 spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/serviceregistry/EurekaServiceRegistry.java
 3.3 AbstractJerseyEurekaHttpClient.java deleteStatusOverride() 下线
     requestBuilder.delete(ClientResponse.class); //delete请求

客户端
============================================================================================================================
服务端
1 InstanceResource.java 一个jersey资源，处理特定instance的操作。类似于一个SpringMVC里的Controller处理器
    1.1 statusUpdate() 处理Client状态修改请求
        if (registry.getInstanceByAppAndId(app.getName(), id) == null) { //根据微服务名称和instanceId查找出InstanceInfo
            AbstractInstanceRegistry.java getInstanceByAppAndId()
                return decorateInstanceInfo(lease); //包装成InstanceInfo
        registry.statusUpdate() //处理状态修改的请求 

    1.2 replicateToPeers() 处理Server间的复制；使用jersey框架
        PeerAwareInstanceRegistryImpl.java statusUpdate() 
            if (super.statusUpdate(appName, id, newStatus, lastDirtyTimestamp, isReplication)) { //缺失？

            replicateToPeers(Action.StatusUpdate, appName, id, null, newStatus, isReplication); //server间的复制，做同步
                replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node); //复制信息给除了自己之外的其他EurekaServer
                    node.statusUpdate(appName, id, newStatus, infoFromRegistry); //状态修改 
                        PeerEurekaNode.statusUpdate() replicationClient.statusUpdate(appName, id, newStatus, info); // server间的复制 
                            AbstractJerseyEurekaHttpClient.statusUpdate() requestBuilder.put(ClientResponse.class); //put请求，修改状态

    1.3 deleteStatusUpdate() 处理客户端删除overridden状态请求；客户端提交了CANCEL_OVERRIDE状态请求，服务端在此处理
        registry.deleteStatusOverride() //进行删除 
            PeerAwareInstanceRegistryImpl.deleteStatusOverride()
                if (super.deleteStatusOverride(appName, id, newStatus, lastDirtyTimestamp, isReplication)) { //删除 
                    AbstractInstanceRegistry.deleteStatusOverride()
                replicateToPeers(Action.DeleteStatusOverride, appName, id, null, null, isReplication); //做同步 删除

    1.4 renewLease() 续约；客户端是先续约404再注册
        registry.renew(app.getName(), id, isFromReplicaNode); //续约 
            跳转到：spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/InstanceRegistry.java
                return super.renew(appName, serverId, isReplication);//续约
                    跳转到：eureka/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java
                        renew() 
                            if (super.renew(appName, id, isReplication)) { //续约 AbstractInstanceRegistry.renew()
                                this.getOverriddenInstanceStatus(instanceInfo, leaseToRenew, isReplication);//计算出当前client新的status的状态
                            replicateToPeers(Action.Heartbeat, appName, id, null, null, isReplication); //做同步
        response = this.validateDirtyTimestamp(Long.valueOf(lastDirtyTimestamp), isFromReplicaNode); //验证时间一样不一样
        registry.storeOverriddenStatusIfRequired(app.getAppName(), id, InstanceStatus.valueOf(overriddenStatus)); //续约时做同步 AbstractInstanceRegistry.java
 
    1.5 addInstance() Server处理客户端注册请求  ApplicationResource.java 
        registry.register(info, "true".equals(isReplication)); //注册
            PeerAwareInstanceRegistryImpl.java  register() 处理Client的注册
                super.register(info, leaseDuration, isReplication); //注册
                    AbstractInstanceRegistry.java  register()处理Client的注册
                        updateRenewsPerMinThreshold(); //更新续约的每分钟的阈值
                        getOverriddenInstanceStatus(registrant, existingLease, isReplication); //计算状态
                            getInstanceInfoOverrideRule(); //获取规则
                            return rule.apply(r, existingLease, isReplication).status(); //应用
                                FirstMatchWinsCompositeRule.java apply() 
                                    this.rules[i].apply(instanceInfo, existingLease, isReplication);
                                    P34 未完待续。。

                replicateToPeers(Action.Register, info.getAppName(), info.getId(), info, null, isReplication); //server间的复制

    1.6 cancelLease() Server处理客户端下架请求 
        boolean isSuccess = registry.cancel(app.getName(), id, "true".equals(isReplication)); //处理下架请求
            AbstractInstanceRegistry.cancel().internalCancel() 处理下架请求
            处理下架请求完成的主要任务：
            *将该client从注册表中删除
                将指定client的overriddenStatus从overriddenInstanceStatusMap删除
                将本次操作记录到recentlyChangedQueue
                修改注册表中该client的lastUpdatedTimestamp

    1.7  () Server处理客户端全量下载请求 

    1.8  () Server处理客户端增量下载请求 

    1.9  () 定时清除过期Client 
        PeerAwareInstanceRegistryImpl.java openForTraffic()
            super.postInit(); -> AbstractInstanceRegistry.postInit()
                EvictionTask.run() 
                    long compensationTimeMs = getCompensationTimeMs();// 计算补偿时间 【关于补偿时间】
                    evict(compensationTimeMs);// 开始清除
                        if (!isLeaseExpirationEnabled()) {// 若注册表中的实例不会过期，则直接结束，不用清除[配置自我保护关闭就会过期]

        清除方法解析
 

 


